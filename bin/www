#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test-socketio-multiplayer:server');
var http = require('http');
const { Server } = require("socket.io");

const {USERS, ROOMS, playerCompute} = require('./system')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const ioServer = new Server(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

ioServer.on('connection', (socket) => {
  debug('a user connected :'+socket.id);

  USERS[socket.id] = {
    id: socket.id,
    socket: socket,
    position: {x:0, y:0}
  }

  ioServer.emit("player-join", {
    players: Object.values(USERS).map(u => {
      return {
        id: u.id,
        position: u.position
      }
    }),
    player:{id:socket.id}
  })
  socket.on("board-update", (playerConfig) => {
    ioServer.emit("player-join", {
      players: Object.values(USERS).map(u => {
        return {
          id: u.id,
          position: u.position
        }
      }),
      player:{id:socket.id}
    })
  })

  debug(Object.keys(USERS))

  socket.on("player-move", (playerConfig) => {
    USERS[socket.id].position = playerCompute(playerConfig)
    ioServer.emit("player-move-computed", {
      playerId: socket.id,
      position: USERS[socket.id].position
    })
  })

  socket.on('disconnect', () => {
    debug('user disconnected :'+socket.id);
    delete USERS[socket.id]
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
